<Project Sdk="Microsoft.NET.Sdk.Razor">
  <PropertyGroup>
    <TargetFrameworks>net6.0;net7.0;net8.0</TargetFrameworks>
    <AssemblyName>Blorc.OpenIdConnect</AssemblyName>
    <RootNamespace>Blorc.OpenIdConnect</RootNamespace>
    <PackageId>Blorc.OpenIdConnect</PackageId>
    <PackageVersion>1.0.0-alpha0000</PackageVersion>
    <Description>OpenIdConnect library for Blazor libraries and apps.</Description>
    <PackageTags>blazor;core</PackageTags>
    <IsPackable>true</IsPackable>
    <RazorLangVersion>3.0</RazorLangVersion>
    <AddRazorSupportForMvc>true</AddRazorSupportForMvc>
    <AutoGenerateBindingRedirects>false</AutoGenerateBindingRedirects>
    <Nullable>enable</Nullable>
  </PropertyGroup>
  
  <PropertyGroup>
    <!-- SonarQube requires a project guid -->
    <ProjectGuid>E68BDD6F-F81B-4B99-A955-E5868F86227D</ProjectGuid>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Blorc.Core" Version="1.4.0" />
    <PackageReference Include="Fody" Version="6.8.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="Obsolete.Fody" Version="5.3.0" PrivateAssets="all" />
  </ItemGroup>
  
  <ItemGroup Condition=" $(TargetFramework.StartsWith('net6.0')) ">
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.Authentication" Version="6.0.*" />
    <PackageReference Include="Microsoft.Extensions.Http" Version="6.0.*" />
  </ItemGroup>
  
  <ItemGroup Condition=" $(TargetFramework.StartsWith('net7.0')) ">
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.Authentication" Version="7.0.*" />
    <PackageReference Include="Microsoft.Extensions.Http" Version="7.0.*" />
  </ItemGroup>
  
  <ItemGroup Condition=" $(TargetFramework.StartsWith('net8.0')) ">
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.Authentication" Version="8.0.*" />
    <PackageReference Include="Microsoft.Extensions.Http" Version="8.0.*" />
  </ItemGroup>
  
  <ItemGroup>
    <Content Remove="package.json" />
    <None Include="package.json" />
  </ItemGroup>

  <ItemGroup>
    <Service Include="{508349b6-6b84-4df5-91f0-309beebad82d}" />
  </ItemGroup>

  <Import Project="$(MSBuildProjectDirectory)\..\Directory.build.nullable.props" Condition="Exists('$(MSBuildProjectDirectory)\..\Directory.build.nullable.props')" />
  <Import Project="$(MSBuildProjectDirectory)\..\Directory.build.shared.explicit.props" Condition="Exists('$(MSBuildProjectDirectory)\..\Directory.build.shared.explicit.props')" />
  <Import Project="$(MSBuildProjectDirectory)\..\Directory.build.shared.mat.props" Condition="Exists('$(MSBuildProjectDirectory)\..\Directory.build.shared.mat.props')" />

  <!-- Note: only copy files in debug mode, we don't want automatic actions in release mode / during publishing -->
  
  <Target Name="PreBuild - Copy oidc-client-ts" AfterTargets="NpmInstall" Condition="'$(Configuration)'=='Debug'">
    <Exec Command="copy /y &quot;$(ProjectDir)node_modules\oidc-client-ts\dist\browser\oidc-client-ts.min.js&quot; &quot;$(ProjectDir)wwwroot\oidc-client.min.js&quot;" />
  </Target>

  <Target Name="NpmInstall" Inputs="package.json" Outputs="node_modules/.install-stamp" BeforeTargets="BeforeBuild" Condition="'$(Configuration)'=='Debug'">
    <!--
        Use npm install or npm ci depending on RestorePackagesWithLockFile value.
        Uncomment the following lines if you want to use this feature:

        <PropertyGroup>
          <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>
        </PropertyGroup>
     -->
    <Exec Command="npm ci" Condition="'$(RestorePackagesWithLockFile)' == 'true'" />
    <Exec Command="npm install" Condition="'$(RestorePackagesWithLockFile)' != 'true'" />

    <!-- Write the stamp file, so incremental builds work -->
    <Touch Files="node_modules/.install-stamp" AlwaysCreate="true" />
  </Target>

</Project>
